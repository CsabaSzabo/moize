/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

declare interface Config {
    equals?: (firstValue: any, secondValue: any) => boolean,
        isPromise?: boolean,
        isReact?: boolean,
        maxAge?: number,
        maxArgs?: number,
        maxSize?: number,
        promiseLibrary?: PromiseLibrary<any>,
        serialize?: boolean,
        serializeFunctions?: boolean,
        serializer?: (...args: any[]) => any
}
declare interface PromiseLibrary<T>{
    (callback: (resolve: (r?: T | PromiseLike<T>) => void, reject: (e?: any) => void) => void): PromiseLike<T>,
    reject: (err: Error) => any,
    resolve: (v: T) => any
}
declare type Fn = (...args: any[]) => any;
declare type Moizer<T>= (t: T) => T;
declare module.exports: typeof moize
declare var npm$namespace$moize: {
    maxAge: typeof moize$maxAge,
    maxArgs: typeof moize$maxArgs,
    maxSize: typeof moize$maxSize,
    promise: typeof moize$promise,
    react: typeof moize$react,
    reactSimple: typeof moize$reactSimple,
    serialize: typeof moize$serialize,
    simple: typeof moize$simple,
    compose: typeof moize$compose,
}
declare function moize$maxAge<T>(a: number): (t: T) => T

declare function moize$maxArgs<T>(a: number): (t: T) => T

declare function moize$maxSize<T>(a: number): (t: T) => T

declare function moize$promise<T>(t: T): T

declare function moize$react<T>(t: T): T

declare function moize$reactSimple<T>(t: T): T

declare function moize$serialize<T>(t: T): T

declare function moize$simple<T>(t: T): T

declare function moize$compose<T>(...fns: Array<Moizer<T >> ): Moizer<T >